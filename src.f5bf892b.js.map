{"version":3,"sources":["node_modules/eventemitter3/index.js","src/plant.ts","src/plant-spec.ts","src/zombie.ts","src/zombie-spec.ts","src/entity-manager.ts","src/square.ts","src/row.ts","src/model.ts","src/renderer.ts","src/game.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.f5bf892b.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import EventEmitter from \"eventemitter3\";\nimport PlantSpec from \"./plant-spec\";\n\nexport default class Plant {\n\n  public eventEmitter: EventEmitter = new EventEmitter();\n  public type: number;\n  public health: number = 1;\n\n  public toughness: number = 0;\n  public attack: number = 0;\n  \n\n  constructor() {\n\n  }\n\n  public destroy():void {\n    console.log('Plant model destroy');\n    this.eventEmitter.emit('destroy', this);\n  }\n\n  public static create(spec: PlantSpec): Zombie {\n    const plant = new Plant();\n    plant.type = spec.type || 0;\n    plant.toughness = spec.toughness || 0.5;\n    plant.attack = spec.attack || 0.5;\n    \n    return plant;\n  }\n\n}","export default class PlantSpec {\n\n  public type: number;\n  public name: string;\n  public toughness: number = 0.5;\n  public attack: number = 0.5;\n  \n}","import EventEmitter from \"eventemitter3\";\nimport Row from \"./row\";\nimport ZombieSpec from \"./zombie-spec\";\n\nexport default class Zombie {\n\n  public parent: Row;\n  public eventEmitter: EventEmitter;\n  public squareN: number;\n  private _state: string;\n  public type: number;\n  public health: number;\n  public progress: number;\n\n  public speed: number;\n  public attack: number;\n  public toughness: number;\n\n  public set state(value: string) {\n    const oldState:string = this._state;\n    this._state = value;\n    this.eventEmitter.emit('state-change', this, oldState);\n  }\n\n  public get state() {\n    return this._state;\n  }\n\n  public static create(spec: ZombieSpec): Zombie {\n    const zombie = new Zombie();\n    zombie.type = spec.type || 0;\n    zombie.progress = 0;\n    zombie.health = 1;\n    zombie.speed = spec.speed || 1;\n    zombie.attack = spec.attack || 1;\n    zombie.toughness = spec.toughness || 1;\n    \n    \n    return zombie;\n  }\n\n  constructor() {\n    this.eventEmitter = new EventEmitter();\n  }\n\n}","export default class ZombieSpec {\n\n  public type: number;\n  public name: string;\n  public speed: number;\n  public attack: number = 0.5;\n  public toughness: number = 0.5;\n  \n\n}","import Plant from \"./plant\";\nimport PlantSpec from \"./plant-spec\";\nimport Zombie from \"./zombie\";\nimport ZombieSpec from \"./zombie-spec\";\n\nexport default class EntityManager {\n\n  private _zombieSpecs: ZombieSpec[];\n  private _plantSpecs: PlantSpec[];\n  \n  public get numPlants(): int {\n    return this._plantSpecs.length;\n  }\n\n  constructor() {\n    this._zombieSpecs = [];\n\n    // Create zombie specs here for now\n    let zombie: ZombieSpec = new ZombieSpec();\n    zombie.type = 0;\n    zombie.name = 'Normal';\n    zombie.speed = 0.6;\n    zombie.attack = 0.5;\n    this._zombieSpecs.push(zombie);\n\n    zombie = new ZombieSpec();\n    zombie.type = 1;\n    zombie.name = 'Cone Head';\n    zombie.speed = 0.4;\n    zombie.attack = 0.9;\n    this._zombieSpecs.push(zombie);\n\n    // Plants\n    this._plantSpecs = [];\n\n    let plant: PlantSpec = new PlantSpec();\n    plant.type = 0;\n    plant.name = 'Brick';\n    plant.toughness = 0.9;\n    this._plantSpecs.push(plant);\n\n    plant = new PlantSpec();\n    plant.type = 1;\n    plant.name = 'Salad';\n    plant.toughness = 0.1;\n    this._plantSpecs.push(plant);\n\n    plant = new PlantSpec();\n    plant.type = 2;\n    plant.name = 'Chilli';\n    plant.toughness = 0.8;\n    plant.attack = 0.8;\n    this._plantSpecs.push(plant);\n\n    plant = new PlantSpec();\n    plant.type = 3;\n    plant.name = 'Cherry';\n    plant.toughness = 0.5;\n    this._plantSpecs.push(plant);\n\n  \n  }\n\n  public createZombie(type: number): Zombie {\n    const zombieSpec: ZombieSpec = this._zombieSpecs[type];\n    const zombie: Zombie = Zombie.create(zombieSpec);\n    return zombie;\n  }\n\n\n  public createPlant(type: number): Plant {\n    const plantSpec: PlantSpec = this._plantSpecs[type];\n    const plant: Plant = Plant.create(plantSpec);\n    return plant;\n  }\n\n\n}","import EventEmitter from \"eventemitter3\";\nimport Plant from \"./plant\";\n\nexport default class Square {\n\n  public squares:Square[];\n  public plant: Plant;\n  public eventEmitter: EventEmitter;\n\n  constructor(public rowIndex:number, public colIndex:number) {\n    this.eventEmitter = new EventEmitter();\n  }\n\n  addPlant(plant: Plant): void {\n    this.plant = plant;\n    this.plant.eventEmitter.addListener('destroy', (plant) => {\n      console.log('Square destroy plant ', plant);\n      this.plant = null;\n      this.eventEmitter.emit('destroy', this);\n    })\n    this.eventEmitter.emit('plant-added', this);\n  }\n\n\n}","import EventEmitter from \"eventemitter3\";\nimport Square from \"./square\";\nimport Zombie from \"./zombie\";\n\nexport default class Row {\n\n  public zombies: Zombie[];\n  public squares: Square[];\n  public eventEmitter: EventEmitter;\n\n  public static create(numCols: number, index: number) {\n    const row = new Row(index);\n\n    for(let i:number = 0; i < numCols; i++) {\n      const square = new Square(index, i);\n      row.squares.push(square);\n      square.eventEmitter.addListener('plant-added', (square:Square) => {\n        console.log('Row plant added ', square);\n        row.eventEmitter.emit('plant-added', square);\n      });\n      );\n    }\n\n    return row;\n  }\n\n  constructor(public index: number) {\n    this.squares = [];\n    this.zombies = [];\n    this.eventEmitter = new EventEmitter();\n  }\n\n  public addZombie(zombie: Zombie) {\n    zombie.parent = this;\n    this.zombies.push(zombie);\n    this.eventEmitter.emit('add', zombie);\n    const row:Row = this;\n    zombie.eventEmitter.addListener('remove', (e) => {\n      row.removeZombie(zombie);\n    });\n  }\n\n  public removeZombie(zombie: Zombie) {\n    const index = this.zombies.indexOf(zombie);\n    if(index == -1) {\n      console.log('Zombie not found');\n      return;\n    }\n    this.zombies.splice(index, 1);\n\n    this.eventEmitter.emit('remove', zombie);\n  }\n\n\n\n}","import EventEmitter from \"eventemitter3\";\nimport PlantSpec from \"./plant-spec\";\nimport Row from \"./row\";\nimport Square from \"./square\";\nimport Zombie from \"./zombie\";\n\nexport default class Model {\n\n  public numCols:number = 9;\n  public numRows:number = 5;\n  public plants:PlantSpec[];\n  public eventEmitter: EventEmitter;\n\n  public rows: Row[];\n  \n  constructor() {\n    this.eventEmitter = new EventEmitter();\n    this.rows = [];\n    for(let i = 0; i < this.numRows; i++) {\n      const row = Row.create(this.numCols, i);\n      row.eventEmitter.addListener('plant-added', (square: Square) => {\n        console.log('model plant added ', square);\n        this.eventEmitter.emit('plant-added', square);\n      })\n      this.rows.push(row);\n    }\n\n\n    // Plant\n    this.plants = [];\n    for (let i=0; i<4; i++) {\n      const plantSpec:PlantSpec = new PlantSpec();\n      this.plants.push(plantSpec);\n    }\n  }\n\n}","import EventEmitter from \"eventemitter3\";\nimport Level from \"./level\";\nimport Model from \"./model\";\nimport Plant from \"./plant\";\nimport PlantSpec from \"./plant-spec\";\nimport Row from \"./row\";\nimport Square from \"./square\";\nimport Zombie from \"./zombie\";\n\nexport default class Renderer {\n\n  public debug: boolean = true;\n  private _squareSize: number = 100;\n  private _zombieStartX: number;\n  private _zombiesToEl:Map<Zombie, HTMLElement>;\n  public eventEmitter: EventEmitter;\n  \n  constructor(private _model: Model) {\n    this.eventEmitter = new EventEmitter():\n    this._zombieStartX = this._model.numCols * this._squareSize;\n    this._zombiesToEl = new Map<Zombie, HTMLElement>();\n\n    this._model.eventEmitter.addListener('plant-added', (square: Square) => {\n      console.log('renderer heard model plant-added');\n      this.addPlant(square);\n    });\n  }\n\n  private createPlantMenu() {\n    const menuHolder = document.querySelector('#plant-menu');\n    this._model.plants.forEach((plantSpec:PlantSpec, index: number) => {\n      const plantButton:HTMLElement = document.createElement('div');\n      plantButton.innerHTML = `\n        <div class=\"plantish plant-button\" type=\"${index}\">\n          Plant ${index}\n        </div>\n      `;\n      menuHolder.appendChild(plantButton);\n    });\n\n  }\n\n  private creatRow(row: Row, rowIndex: number) {\n    const el = document.createElement('div');\n    el.classList.add('row');\n    //el.innerHTML = 'ROW';\n    el.style.top = `${rowIndex * this._squareSize}px`;\n    // Add squares to row\n    row.squares.forEach((square: Square, colIndex: number) => {\n      const squareEl = this.createSquare(colIndex);\n      squareEl.setAttribute('row', String(rowIndex));\n      squareEl.setAttribute('col', String(colIndex));\n      \n      const n = (rowIndex * this._model.numCols) + colIndex;\n      const styles = ['green-light', 'green-med', 'green-dark'];\n      let c = 0;\n      if (colIndex % 2 === 0) {\n        c++;\n      }\n      if (rowIndex % 2 !== 0) {\n        c++;\n      }\n      squareEl.classList.add('square');\n      squareEl.classList.add(styles[c]);\n      el.appendChild(squareEl);\n\n    });\n    \n    return el;\n  }\n\n  private createSquare(index: number) {\n    const el = document.createElement('div');\n    el.classList.add('square');\n    //el.innerHTML = 'SQUARE';\n    el.style.left = `${this._squareSize * index}px`;\n    el.style.width = `${this._squareSize}px`;\n    el.style.height = `${this._squareSize}px`;\n    \n    return el;\n  }\n\n  private createZombie(zombie: Zombie) {\n    const el = document.createElement('div');\n    el.classList.add('zombie');\n    el.setAttribute('type', zombie.type);\n    // el.innerHTML = 'ZOMBIE';\n    el.style.left = `${this._squareSize * this._model.numCols}px`;\n\n    el.style.width = `${this._squareSize}px`;\n    el.style.height = `${this._squareSize}px`;\n    \n    this._zombiesToEl.set(zombie, el);\n\n    zombie.eventEmitter.addListener('state-change', (zombie: Zombie, oldState: string) => {\n      //console.log('Renderer heard Zombie state change ', zombie.state);\n      el.classList.remove(oldState);\n      if (zombie.state) {\n        el.classList.add(zombie.state);\n      }\n    });\n\n    if(this.debug) {\n      this.addDebugger(el, zombie);\n    }\n    return el;\n  }\n\n  private removeZombie(zombie: Zombie) {\n    const el:HTMLElement = this._zombiesToEl.get(zombie);\n    if(el) {\n      el.parentElement.removeChild(el);\n    }\n  }\n\n\n  private addPlant(square: Square) {\n    const el = document.createElement('div');\n    el.classList.add('plant');\n    el.classList.add('plantish');\n-\n    el.innerHTML = 'PLANT' + square.plant.type;\n    el.setAttribute('type', '' + square.plant.type);\n\n    const squareEl:HTMLElement = this.getSquareElement(square);\n    squareEl.appendChild(el);\n\n    square.eventEmitter.addListener('destroy', this.removePlantHandler.bind(this));\n\n    return el;\n  }\n\n  private removePlantHandler(square:Square): void {\n    console.log('renderer destroy plant');\n    const squareEl:HTMLElement = this.getSquareElement(square);\n    const plantEl: HTMLElement = squareEl.querySelector('.plant');\n    squareEl.removeChild(plantEl);\n  }\n\n  private getSquareElement(square: Square): HTMLElement {\n    return document.querySelector(`.square[row=\"${square.rowIndex}\"][col=\"${square.colIndex}\"]`);\n  }\n\n\n  private addDebugger(el: HTMLElement, zombie: Zombie) {\n    const info:HTMLElement = document.createElement('div');\n    info.classList.add('debugger');\n    info.innerHTML = '';\n    el.appendChild(info);\n\n  }\n\n  private updateDebugger(el: HTMLElement, zombie: Zombie): void {\n    const debuggerEl: HTMLElement = el.querySelector('.debugger');\n    if (debuggerEl) {\n      debuggerEl.innerHTML = '' + parseInt(zombie.health * 100, 10);\n    }\n  }\n\n  init() {\n\n    const gameContainer = document.querySelector('#game');\n\n    this.createPlantMenu();\n\n    // Plant Menu\n    document.querySelectorAll('.plant-button').forEach((button: HTMLElement) => {\n      button.addEventListener('click', () => {\n        console.log('Select plant ' + button.getAttribute('type'));\n        this.eventEmitter.emit('plant-selected', button.getAttribute('type'));\n      })\n    });\n\n\n    this._model.rows.forEach((row:Row, index: number) => {\n      row.eventEmitter.addListener('remove', (zombie: Zombie) => {\n        // Remove zombie sprite\n        const el = this._zombiesToEl.get(zombie);\n        el.parentElement.removeChild(el);\n      })\n      const rowEl = this.creatRow(row, index);\n      //rowEl.style.zIndex = -10000;\n      gameContainer.appendChild(rowEl);\n\n      // render zombies\n      row.zombies.forEach((zombie: Zombie) => {\n        const zombieEl = this.createZombie(zombie);\n        rowEl.appendChild(zombieEl);\n      };\n\n      row.eventEmitter.addListener('add', (zombie: Zombie) => {\n        const zombieEl = this.createZombie(zombie);\n        rowEl.appendChild(zombieEl);\n      })\n\n    });\n\n    gameContainer.querySelectorAll('.square').forEach((square: HTMLElement) => {\n      square.addEventListener('click', () => {\n        console.log('Square Click!');\n        this.eventEmitter.emit('square-click', square.getAttribute('row'), square.getAttribute('col'))\n      });\n    })\n\n  }\n\n  render(): void {  \n    this._model.rows.forEach((row:Row, index: number) => {\n      row.zombies.forEach((zombie: Zombie) => {\n        const zombieEl = this._zombiesToEl.get(zombie);\n        if (zombieEl) {\n          //zombieEl.innerHTML = zombie.squareN + '';\n          zombieEl.style.left = `${this._zombieStartX - (zombie.progress * this._zombieStartX)}px`;\n          // zombieEl.classList.add(zombie.state);\n          // if (this.debug) {\n          //   this.updateDebugger(zombieEl, zombie);\n          // }\n        }\n      });\n\n\n      row.squares.forEach((square: Square) => {\n        const squareEl:HTMLElement = this.getSquareElement(square);\n        if (square.plant) {\n          const plant = squareEl.querySelector('.plant');\n          plant.innerHTML = `${square.plant.type} - ${square.plant.health}`;\n        }\n        \n        // const zombieEl = this._zombiesToEl.get(zombie);\n        // if (zombieEl) {\n        //   zombieEl.innerHTML = zombie.squareN + '';\n        //   zombieEl.style.left = `${this._zombieStartX - (zombie.progress * this._zombieStartX)}px`;  \n        // }  \n      });\n\n    });\n  }\n\n}","import EntityManager from \"./entity-manager\";\nimport Level from \"./level\";\nimport Model from \"./model\";\nimport Plant from \"./plant\";\nimport Renderer from \"./renderer\";\nimport Row from \"./row\";\nimport Square from \"./square\";\nimport Zombie from \"./zombie\";\nimport ZombieSpec from \"./zombie-spec\";\n\nexport default class Game {\n\n  private _level: Level;\n  private _renderer: Renderer;\n  private _model: Model;\n  private _zombieSpecs: ZombieSpec[];\n  private _endGame: boolean;\n  private _entityManager: EntityManager;\n  private _currentPlant: Number = 0;\n  \n  constructor() {\n    // TODO make singleton\n    this._entityManager = new EntityManager();\n    this._model = new Model();\n    this._renderer = new Renderer(this._model);\n    this._renderer.init();\n    this._renderer.eventEmitter.addListener('square-click', (row, col) => {\n      console.log('Game square-click ', row, col);\n      this.addPlantToModel(row, col, this._currentPlant);\n    });\n\n    this._renderer.eventEmitter.addListener('plant-selected', (id) => {\n      console.log('Game plant selected ' + id);\n      this._currentPlant = id;\n    });\n\n    this.startGame();\n  }\n\n  public gameLoop() {\n\n    const renderFactor: number = 0.02;\n    const speedFactor: number = 0.005;\n    \n    if(this._endGame) return;\n\n    this._model.rows.forEach((row: Row) => {\n      row.zombies.forEach((zombie: Zombie) => {\n        \n        // Plant detection\n        const halfSquare: number = 1 / this._model.numCols * 0.5;\n        const squareN: number = this._model.numCols - Math.ceil((zombie.progress - halfSquare) * this._model.numCols);\n        zombie.squareN = squareN;\n        const zombieSquare: Square = row.squares[squareN];\n\n        // If Zombie is eating a plant\n        if(zombieSquare && zombieSquare.plant) {\n          zombie.state = 'eating';\n          \n          const plant:Plant = zombieSquare.plant;\n\n          const plantAttack = (plant.attack + plant.toughness) / 2 * renderFactor;\n          const zombieAttack = (zombie.attack + zombie.toughness) / 2 * renderFactor;;\n          \n          zombie.health -= plantAttack;\n          plant.health -= zombieAttack;\n\n          if (zombie.health <= 0) {\n            zombie.parent.removeZombie(zombie);\n          }\n          if (zombieSquare.plant.health <= 0) {\n            zombieSquare.plant.destroy();\n            zombie.state = '';\n          }\n        } \n        else {\n          if(zombie.state) { \n            zombie.state = '';\n          }\n          zombie.progress += zombie.speed * speedFactor;\n        }\n\n        // Destroy Zombie when reaches end \n        if (zombie.progress >= 1) {\n          zombie.parent.removeZombie(zombie);\n        }\n      });\n\n      if(this.randomAdd() && row.zombies.length < 1) {\n        const typeID: number = Math.round(Math.random());\n        row.addZombie(this._entityManager.createZombie(typeID));\n      }\n\n    });\n\n    this._renderer.render();\n\n    //requestAnimationFrame(this.gameLoop.bind(this));\n  }\n\n  private randomAdd(): boolean {\n   return Math.random() < 0.05;\n  }\n\n  public startGame() {\n    setInterval(this.gameLoop.bind(this), 50);\n  }\n\n  private addPlantToModel(row, col, plantID): void {\n    console.log('Game.addPlant', row, col);\n    const square: Square = this._model.rows[row].squares[col];\n    if (square.plant) {\n      console.log('Square already has a plant');\n      return;\n    }\n    \n    //const plantID:number = Math.round(Math.random() * (this._entityManager.numPlants - 1));\n    const plant = this._entityManager.createPlant(plantID);\n    square.addPlant(plant);\n  }\n\n}","import Game from './game';\n\nconst game = new Game();\n"]}